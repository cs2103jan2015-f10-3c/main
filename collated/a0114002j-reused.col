//@author: a0114002j-reused



	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataStorage\Storing - Local.cpp
	 */

//sorting dataList for maintenance
//use radix sorting algorithm
void LocalStorage::sortDataList(){
	int i;
	int power = 1;
	std::queue<Data> digitQueue[NO_OF_DIGITS];
	
	allocatePsedoDate();

	for (i=0; i < LENGTH_OF_PSEDODATE; i++) {
		radixDistribute(digitQueue, power);
		radixCollect(digitQueue);
		power *= NO_OF_DIGITS;
	}

}

//helper method for radix sort
//organise items into groups using digit indicated by the power
void LocalStorage::radixDistribute(std::queue<Data> digitQ[], int power){
	int digit;

	for(int i = 0; i != dataList.size(); i++){
		long long sDate = dataList[i].getPsedoDate();
		digit = (sDate / power ) % NO_OF_DIGITS; //extract digit
		digitQ[digit].push(dataList[i]);

	}
}

//helper method for radix sort
//put Data back into dataList
void LocalStorage::radixCollect(std::queue<Data> digitQ[]){
	int digit;
	int i=0;

	for(digit = 0 ; digit < NO_OF_DIGITS; digit++){
		while (!digitQ[digit].empty()) {
			dataList[i] = digitQ[digit].front();
			digitQ[digit].pop();
	
			i++;
		}
	}
}

	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataStorage\Storing - Local.cpp





