//@author: a0114421y



	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\BlinkListSystemTest\BlinkListSystemTest.cpp
	 */

		//For command "delete"
		TEST_METHOD(deleteUntilNoMoreTaskLeftTest)			
		{
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add 25/4 12:00 task 1");
			OperationCenter::executeInput("delete 1");

			string actualResponse = OperationCenter::getResponse(); 
			string expectedResponse = "task 1 on Saturday, 25-4-2015 at 12:00 is deleted from BlinkList\n";
			Assert::AreEqual(expectedResponse, actualResponse);
			
			string actualDisplay = OperationCenter::getDisplay();
			string expectedDisplay = "You have no task on Saturday, 25-4-2015\n";
			Assert::AreEqual(expectedDisplay, actualDisplay);

		}

		TEST_METHOD(deleteWithTasksLeftTest)
		{
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add 25/4 12:00 task 1");
			OperationCenter::executeInput("add 25/4 14:00 task 2");
			OperationCenter::executeInput("add 25/4 16:00 task 3");
			OperationCenter::executeInput("delete 2");

			string actualResponse = OperationCenter::getResponse();
			string expectedResponse = "task 2 on Saturday, 25-4-2015 at 14:00 is deleted from BlinkList\n";
			Assert::AreEqual(expectedResponse, actualResponse);

			string actualDisplay = OperationCenter::getDisplay();
			string expectedDisplay;
			ostringstream out;
			out	<< "Your agenda for Saturday, 25-4-2015:" << endl << endl
				<< "1. task 1" << endl
				<< "   Saturday        12:00                                              25-4-2015" <<endl 
				<< "________________________________________________________________________________"<< endl
				<< "2. task 3" << endl
				<< "   Saturday        16:00                                              25-4-2015" <<endl
				<< "________________________________________________________________________________" << endl;
			expectedDisplay = out.str();
			Assert::AreEqual(expectedDisplay, actualDisplay);
		}

		TEST_METHOD(deleteFloatingTask)
		{
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add task 1");
			OperationCenter::executeInput("add task 2");
			OperationCenter::executeInput("add task 3");
			OperationCenter::executeInput("delete 1");

			string actualResponse = OperationCenter::getResponse();
			string expectedResponse = "task 1 is deleted from BlinkList\n";
			Assert::AreEqual(expectedResponse, actualResponse);

			string actualDisplay = OperationCenter::getDisplay();
			string expectedDisplay;
			ostringstream out;
			out	<< "Your tasks with unspecified date are as follows: " << endl << endl
				<< "1. task 2" << endl << "                   " <<endl
				<< "________________________________________________________________________________"<< endl
				<< "2. task 3" << endl << "                   " <<endl
				<< "________________________________________________________________________________" << endl;
			expectedDisplay = out.str();
			Assert::AreEqual(expectedDisplay, actualDisplay);

		}

		TEST_METHOD(deleteUntilNoMoreFloatingTaskTest)
		{	
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add task 1");
			OperationCenter::executeInput("add task 2");
			OperationCenter::executeInput("add task 3");
			
			OperationCenter::executeInput("delete 1");
			string actualResponse1 = OperationCenter::getResponse();
			string expectedResponse1 = "task 1 is deleted from BlinkList\n";
			Assert::AreEqual(expectedResponse1, actualResponse1);
			
			OperationCenter::executeInput("delete 1");
			string actualResponse2 = OperationCenter::getResponse();
			string expectedResponse2 = "task 2 is deleted from BlinkList\n";
			Assert::AreEqual(expectedResponse2, actualResponse2);
			
			OperationCenter::executeInput("delete 1");
			string actualResponse3 = OperationCenter::getResponse();
			string expectedResponse3 = "task 3 is deleted from BlinkList\n";
			Assert::AreEqual(expectedResponse3, actualResponse3);

			string actualDisplay = OperationCenter::getDisplay();
			string expectedDisplay;
			ostringstream out;
			out	<< "You have no task with unspecified date" << endl;
			expectedDisplay = out.str();
			Assert::AreEqual(expectedDisplay, actualDisplay);
		}

		TEST_METHOD(deleteWithoutTaskNumber)
		{
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add task 1");
			OperationCenter::executeInput("add task 2");
			OperationCenter::executeInput("add task 3");

			OperationCenter::executeInput("delete");
			string actualResponse1 = OperationCenter::getResponse();
			string expectedResponse1 = "Please enter correct task number after command word";
			Assert::AreEqual(expectedResponse1, actualResponse1);

			OperationCenter::executeInput("delete ");
			string actualResponse2 = OperationCenter::getResponse();
			string expectedResponse2 = "Please enter correct task number after command word";
			Assert::AreEqual(expectedResponse2, actualResponse2);
		}

		//For command "done"
		TEST_METHOD(doneAllTasksTest)
		{
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add 25/4 12:00 task 1");
			OperationCenter::executeInput("done 1");

			string actualResponse = OperationCenter::getResponse(); 
			string expectedResponse = "task 1 on Saturday, 25-4-2015 at 12:00 is done\n";
			Assert::AreEqual(expectedResponse, actualResponse);
			
			string actualDisplay = OperationCenter::getDisplay();
			string expectedDisplay = "You have no task on Saturday, 25-4-2015\n";
			Assert::AreEqual(expectedDisplay, actualDisplay);

			OperationCenter::executeInput("show done");
			string actualDisplay1 = OperationCenter::getDisplay();
			string expectedDisplay1;
			ostringstream out;
			out << "1. task 1" << endl
				<< "   Saturday        12:00                                              25-4-2015" <<endl 
				<< "________________________________________________________________________________"<< endl;
			expectedDisplay1 = out.str();
			Assert::AreEqual(expectedDisplay1, actualDisplay1);
		}

		TEST_METHOD(doneSomeTasksTest)
		{
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add 25/4 12:00 task 1");
			OperationCenter::executeInput("add 25/4 14:00 task 2");
			OperationCenter::executeInput("add 25/4 16:00 task 3");
			OperationCenter::executeInput("done 2");

			string actualResponse = OperationCenter::getResponse();
			string expectedResponse = "task 2 on Saturday, 25-4-2015 at 14:00 is done\n";
			Assert::AreEqual(expectedResponse, actualResponse);

			string actualDisplay = OperationCenter::getDisplay();
			string expectedDisplay;
			ostringstream out;
			out	<< "Your agenda for Saturday, 25-4-2015:" << endl << endl
				<< "1. task 1" << endl
				<< "   Saturday        12:00                                              25-4-2015" <<endl 
				<< "________________________________________________________________________________"<< endl
				<< "2. task 3" << endl
				<< "   Saturday        16:00                                              25-4-2015" <<endl
				<< "________________________________________________________________________________" << endl;
			expectedDisplay = out.str();
			Assert::AreEqual(expectedDisplay, actualDisplay);

			OperationCenter::executeInput("done 1");

			string actualResponse1 = OperationCenter::getResponse();
			string expectedResponse1 = "task 1 on Saturday, 25-4-2015 at 12:00 is done\n";
			Assert::AreEqual(expectedResponse1, actualResponse1);

			string actualDisplay1 = OperationCenter::getDisplay();
			string expectedDisplay1;
			ostringstream out1;
			out1 << "Your agenda for Saturday, 25-4-2015:" << endl << endl
				 << "1. task 3" << endl
				 << "   Saturday        16:00                                              25-4-2015" <<endl 
				 << "________________________________________________________________________________"<< endl;

			expectedDisplay1 = out1.str();
			Assert::AreEqual(expectedDisplay1, actualDisplay1);

			OperationCenter::executeInput("show done");
			string actualDisplay2 = OperationCenter::getDisplay();
			string expectedDisplay2;
			ostringstream out2;
			out2 << "1. task 2" << endl
				 << "   Saturday        14:00                                              25-4-2015" <<endl 
				 << "________________________________________________________________________________"<< endl
				 << "2. task 1" << endl
				 << "   Saturday        12:00                                              25-4-2015" <<endl
				 << "________________________________________________________________________________" << endl;
			expectedDisplay2 = out2.str();
			Assert::AreEqual(expectedDisplay2, actualDisplay2);
		}

		TEST_METHOD(doneWithoutTaskNumberTest)
		{
			OperationCenter::executeInput("clear");
			OperationCenter::executeInput("add task 1");
			OperationCenter::executeInput("add task 2");
			OperationCenter::executeInput("add task 3");

			OperationCenter::executeInput("done");
			string actualResponse1 = OperationCenter::getResponse();
			string expectedResponse1 = "Please enter correct task number after command word";
			Assert::AreEqual(expectedResponse1, actualResponse1);

			OperationCenter::executeInput("done ");
			string actualResponse2 = OperationCenter::getResponse();
			string expectedResponse2 = "Please enter correct task number after command word";
			Assert::AreEqual(expectedResponse2, actualResponse2);

		}

		TEST_METHOD(showWelcomeMessageFalseTest)
		{
			bool status = false;
			string actualMessage = OperationCenter::showWelcomeMessage(status);
			string expectedMessage = "Welcome to BlinkList!\n\nThere is no saved data\n\n";
			Assert::AreEqual(expectedMessage, actualMessage);
		}

		TEST_METHOD(showWelcomeMessageTrueTest)
		{
			OperationCenter::executeInput("clear");
			bool status = true;
			string actualMessage = OperationCenter::showWelcomeMessage(status);
			string expectedMessage = "Welcome to BlinkList!\n\nToday's Agenda is as follows:\n\n:) You have no task for today\n\n";
			Assert::AreEqual(expectedMessage, actualMessage);
		}

		TEST_METHOD(findPathTrueTest){
			bool actualStatus = OperationCenter::findPath();
			bool expectedStatus = true;
			Assert::AreEqual(expectedStatus, actualStatus);
		}
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\BlinkListSystemTest\BlinkListSystemTest.cpp





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessor\DataProcessor.cpp
	 */


//This function reads in the Data object to be added,
//then return the string reporting the adding which contains the descripiton of the data added
string DataProcessor::addTask(Data task){
	Storing storing;
	storing.addData(task); 
	ostringstream out;
	out << convertDataObjectToLine(task) << ADD_MESSAGE << endl;
	string addMessage;
	addMessage = out.str();
	setLatestData(task);
	return addMessage;
}

//This function reads in the number of the task to be deleted,
//then return the string reporting the deletion which contains the description of the data deleted
string DataProcessor::deleteTask(int number){
	ostringstream out;
	Storing storing;
	Logger logger;
	try{
		out << convertDataObjectToLine(storing.deleteData(number)) << DELETE_MESSAGE << endl;
	}
	catch(string errorMessage){
		throw errorMessage;
	}
	string deleteMessage;
	deleteMessage = out.str();
	return deleteMessage;
}

//This function reads in two TimeMacro objects,
//then return the string which contains the list of task belonging to the desired time frame
string DataProcessor::displayTask(TimeMacro startTime, TimeMacro endTime){
	string taskString;
	Storing storing;
	storing.clearDisplayList();

	taskString = convertTaskListToString(storing.display(startTime, endTime));
	return taskString;
}

void DataProcessor::saveData(){
	Storing storing;
	storing.saveData();
}

void DataProcessor::loadData(bool& status){
	Storing storing;
	storing.loadData(status);
}

Data DataProcessor::getLatestData(){
	return _latestData;
}

void DataProcessor::setLatestData(Data data){
	_latestData = data;
}


	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessor\DataProcessor.cpp





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessor\DataProcessor.h
	 */

	string addTask(Data task);
	string displayTask(TimeMacro startTime, TimeMacro endTime);
	string deleteTask(int number);
	string clearTask();
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessor\DataProcessor.h





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessor\DataProcessor.h
	 */

	static void saveData();
	static void loadData(bool& status);
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessor\DataProcessor.h





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessorTest\DataProcessorTest.cpp
	 */

		TEST_METHOD(AddTaskTest)
		{
			Data task1("jim");
			DataProcessor myDataProcessor;
			ostringstream out;
			std::string expectedAddMessage = "jim is added";
			out << expectedAddMessage << endl;
			std::string actualAddMessage = myDataProcessor.addTask(task1);
			expectedAddMessage = out.str();
			Assert::AreEqual(expectedAddMessage, actualAddMessage);
			// TODO: Your test code here
		}

		TEST_METHOD(DisplayTaskTest){

			TimeMacro start(1, 2, 2000);
			TimeMacro end(1, 2, 2001);
			TimeMacro date(31, 1, 2000);
			Data task1(start, "jim");
			Data task2(end, "john");
			Data task3(date, "jane");
			DataProcessor myDataProcessor;
			myDataProcessor.clearTask();
			//string displayTask(TimeMacro startTime, TimeMacro endTime);
			
			myDataProcessor.addTask(task1);
			myDataProcessor.addTask(task2);
			myDataProcessor.addTask(task3);
			std::string actualDisplay = myDataProcessor.displayTask(start, end);
			ostringstream out;
			out << "1. jim" << endl
				<< "                                                          1-2-2000" << endl 
				<< "________________________________________________________________________________" << endl
				<< "2. john" << endl
				<< "                                                          1-2-2001" << endl 
				<< "________________________________________________________________________________" << endl;

			std::string expectedDisplay = out.str();
			Assert::AreEqual(expectedDisplay, actualDisplay);
		}
		
		
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\DataProcessorTest\DataProcessorTest.cpp





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\Feedback.h
	 */


#ifndef FEEDBACK_H
#define FEEDBACK_H

#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>
#include <sstream>
#include <ctime>
#include <chrono>
#include "Commons.h"

using namespace std;

class Feedback{
private:
	 static string display;
	 static string response;
public:

	static string getDisplay(){
		return display;
	}
	static string getResponse(){
		return response;
	}
	static void updateDisplay(string newDisplay){
		display = newDisplay;
	}
	static void updateResponse(string newResponse){
		response = newResponse;
	}
};

#endif
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\Feedback.h





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\Logic.cpp
	 */


#include "OperationCenter.h"

using namespace std;

const char Logic::COMMA[] = ", ";
const char Logic::DASH[] = "-";
const char Logic::COLON[] = ":";
const char Logic::ADD_COMMAND[] = "add";
const char Logic::DELETE_COMMAND[] = "delete";
const char Logic::SHOW_COMMAND[] = "show";
const char Logic::CLEAR_COMMAND[] = "clear";
const char Logic::SORT_COMMAND[] = "sort";
const char Logic::SEARCH_COMMAND[] = "search";
const char Logic::EDIT_COMMAND[] = "edit";
const char Logic::UNDO_COMMAND[] = "undo";
const char Logic::UNDONE_COMMAND[] = "undone";
const char Logic::HELP_REQUEST[] = "help";
const char Logic::PATH_COMMAND[] = "path";
const char Logic::LOAD_COMMAND[] = "load";
const char Logic::EXIT_COMMAND[] = "exit";
const char Logic::EMPTY_RESPONSE[] = "";
const char Logic::IVALID_COMMAND_MESSAGE[] = "Invalid Command";
const char Logic::DONE_COMMAND[] = "done";
const char Logic::SHOW_COMMANDS[] = "show commands";
const char Logic::SHOW_FEATURES[] = "show features";
const char Logic::SHOW_DONE[] = "show done";
const char Logic::SHOW_FLOAT[] = "show float";
const char Logic::SHOW_TODAY[] = "show today";
const char Logic::FLOAT_NOT_FOUND_MESSAGE[] = "You have no floating task";
const char Logic::DONE_NOT_FOUND_MESSAGE[] = "You are lazy, you have done nothing at all";
const char Logic::SEARCH_NOT_FOUND_MESSAGE[] = "Oops, there is no matching task in your BlinkList\n";
const char Logic::HELP_MESSAGE[] = "Please type 'show commands' or 'show features' to get started";
const char Logic::CANNOT_UNDO_MESSAGE[] = "You can only undo the latest command and undo once";
const char Logic::WELCOME_MESSAGE[] = "Welcome to BlinkList!" ;
const char Logic::TODAY_MESSAGE[] = "Today's Agenda is as follows:";
const char Logic::NO_SAVED_DATA_MESSAGE[] = "There is no saved data";
const char Logic::NO_TASK_TO_SHOW_MESSAGE[] = "You have no task within the specified time period\n";
const char Logic::NO_TASK_TODAY_MESSAGE[] = ":) You have no task for today\n";
const char Logic::NO_TASK_ON_MESSAGE[] = "You have no task on ";
const char Logic::AGENDA_FOR_MESSAGE[] = "Your agenda for ";
const char Logic::NO_FLOAT_TASK_MESSAGE[] = "You have no task with unspecified date";
const char Logic::FLOAT_TASK_MESSAGE[] = "Your tasks with unspecified date are as follows: \n";
const char Logic::PATH_MESSAGE[] = "New user path: ";
const char Logic::REINPUT_PATH[] = "Please reinput path ";
const char Logic::INPUT_PATH_MESSAGE[] = "Please enter a path to save your tasks, e.g: path c:/user/local";
const char Logic::AGENDA_THIS_MONTH_MESSAGE[] = "Your Agenda for This Month: ";
const char Logic::AGENDA_THIS_WEEK_MESSAGE[] = "Your Agenda for This Week: ";

string Feedback::display;
string Feedback::response;
int Logic::undoCount;

void Logic::saveData(){
	DataProcessor::saveData();
}

void Logic::loadData(bool& status){
	DataProcessor::loadData(status);
}

bool Logic::findPath(){
	try{
		if(DataProcessor::checkPathExistence()){
			Feedback::updateResponse(EMPTY_RESPONSE);
			return true;
		}
	}		
	catch (string errorMessage){
		Feedback::updateResponse(errorMessage + INPUT_PATH_MESSAGE);
		return false;
	}
}

string Logic::showWelcomeMessage(bool status){
	ostringstream out;
	out << WELCOME_MESSAGE << endl << endl;
	if(status == true){
		out << TODAY_MESSAGE << endl << endl;
		executeInput(SHOW_TODAY);
		out << Feedback::getDisplay() << endl;

	} else { 
		out << NO_SAVED_DATA_MESSAGE << endl << endl;
	}
	string welcomeMessage = out.str();
	return welcomeMessage;
}

TimeMacro Logic::setCurrentTime(){
	
	time_t t = time (0);   // get time now
    struct tm now;
	localtime_s (&now, &t);

	TimeMacro currentTime(now.tm_mday, now.tm_mon + 1, now.tm_year + 1900);

	return currentTime;
}

string Logic::displayIfEmpty(string returnDisplay, TimeMacro current, TimeMacro start, TimeMacro end){
	if(current.getDate() != start.getDate() || current.getDate() != end.getDate() || current.getMonth() != start.getMonth() || current.getMonth() != end.getMonth() || current.getYear() != start.getYear() || current.getYear() != end.getYear()){
		returnDisplay = NO_TASK_TO_SHOW_MESSAGE;
	} else {
		returnDisplay = NO_TASK_TODAY_MESSAGE;
	}
	return returnDisplay;
}

string Logic::displayToday(string returnDisplay, TimeMacro current){
	DataProcessor dataProcessor;
	ostringstream out;
	returnDisplay = dataProcessor.displayTask(current, current);
	if(returnDisplay == EMPTY_RESPONSE){
		out << endl << NO_TASK_TODAY_MESSAGE << endl;
	}else{
		out<< TODAY_MESSAGE << endl << endl << returnDisplay << endl;
	}
	returnDisplay = out.str();
	return returnDisplay;
}

//display the list of task for a specific day, depending on the date of the object being
//added, edited, deleted or done. 
string Logic::displaySpecificDay(DataProcessor dataProcessor, TimeMacro current){
	Data latestData = dataProcessor.getLatestData();
	string returnDisplay;
	ostringstream out;
	
	//check if the date is today
	if(latestData.getTimeMacroBeg().getDate() == current.getDate() && latestData.getTimeMacroBeg().getMonth() == current.getMonth() && latestData.getTimeMacroBeg().getYear() == current.getYear()){
		returnDisplay = displayToday(returnDisplay, current);
		return returnDisplay;
	}

	returnDisplay = dataProcessor.displayTask(latestData.getTimeMacroBeg(), latestData.getTimeMacroBeg());

	if(returnDisplay == EMPTY_RESPONSE && latestData.getTimeMacroBeg().getDate() != 0){
		out << NO_TASK_ON_MESSAGE << latestData.getTimeMacroBeg().getDay() << COMMA  
			<< latestData.getTimeMacroBeg().getDate() << DASH 
			<< latestData.getTimeMacroBeg().getMonth() << DASH
			<< latestData.getTimeMacroBeg().getYear() << endl;
	} else if(latestData.getTimeMacroBeg().getDate() != 0){
		out << AGENDA_FOR_MESSAGE << latestData.getTimeMacroBeg().getDay() << COMMA  
			<< latestData.getTimeMacroBeg().getDate() << DASH 
			<< latestData.getTimeMacroBeg().getMonth() << DASH
			<< latestData.getTimeMacroBeg().getYear() << COLON << endl << endl;
	} else if(returnDisplay == EMPTY_RESPONSE && latestData.getTimeMacroBeg().getDate() == 0){
		out<< NO_FLOAT_TASK_MESSAGE<< endl;
	} else if(latestData.getTimeMacroBeg().getDate() == 0){
		out << FLOAT_TASK_MESSAGE << endl;
	}

	out << returnDisplay;
	returnDisplay = out.str();
	
	return returnDisplay;
}

string Logic::showReturnDisplay(string returnDisplay, TimeMacro current, Data task){
	if(returnDisplay == EMPTY_RESPONSE){
		returnDisplay = displayIfEmpty(returnDisplay, current, task.getTimeMacroBeg(), task.getTimeMacroEnd());
	} else if(task.getTimeMacroEnd().getDate() == task.getTimeMacroBeg().getDate()) {
		ostringstream out;
		out << AGENDA_FOR_MESSAGE << task.getTimeMacroBeg().getDay() << COMMA  
			<< task.getTimeMacroBeg().getDate() << DASH 
			<< task.getTimeMacroBeg().getMonth() << DASH
			<< task.getTimeMacroBeg().getYear() << COLON << endl << endl;	
		returnDisplay = out.str() + returnDisplay;
	} else if((task.getTimeMacroEnd().getDate() - task.getTimeMacroBeg().getDate()) >= 28){
		ostringstream out;
		out << AGENDA_THIS_MONTH_MESSAGE << endl << endl;	
		returnDisplay = out.str() + returnDisplay;
	} else if((task.getTimeMacroEnd().getDate() - task.getTimeMacroBeg().getDate()) < 28){
		ostringstream out;
		out << AGENDA_THIS_WEEK_MESSAGE << endl << endl;	
		returnDisplay = out.str() + returnDisplay;
	}

	return returnDisplay;
}

void Logic::executeCommand(string& returnDisplay, string& returnResponse, string command, string directory, Data task, int taskNo, TimeMacro currentTime){
	
	DataProcessor dataProcessor;

	if(command == ADD_COMMAND) {
		dataProcessor.clearDisplayList();
		returnResponse = dataProcessor.addTask(task);
		returnDisplay = displaySpecificDay(dataProcessor, currentTime);
	}else if(command == SHOW_COMMAND) {
		dataProcessor.clearDisplayList();
		returnResponse = EMPTY_RESPONSE;
		returnDisplay = dataProcessor.displayTask(task.getTimeMacroBeg(), task.getTimeMacroEnd());
		returnDisplay = showReturnDisplay(returnDisplay, currentTime, task);
	}else if(command == DELETE_COMMAND){
		try{
			returnResponse = dataProcessor.deleteTask(taskNo);
			dataProcessor.clearDisplayList();
			returnDisplay = displaySpecificDay(dataProcessor, currentTime);
		}		
		catch (string errorMessage){
			returnResponse = errorMessage;
		}
		}else if(command == CLEAR_COMMAND){
		dataProcessor.clearDisplayList();
		returnResponse = dataProcessor.clearTask();
	}else if(command == SEARCH_COMMAND){
		try{
			dataProcessor.clearDisplayList();
			returnDisplay = dataProcessor.searchTask(task.getDesc());
			returnResponse = EMPTY_RESPONSE;
		}
		catch (std::exception e){
			//std::cout << e.what();
			returnResponse = e.what();
		}
		if(returnDisplay == EMPTY_RESPONSE){
			returnResponse = SEARCH_NOT_FOUND_MESSAGE;
		}
	}else if(command == EDIT_COMMAND){
		try{
			returnResponse = dataProcessor.editTask(taskNo, task);
			dataProcessor.clearDisplayList();
			returnDisplay = displaySpecificDay(dataProcessor, currentTime);
		}
		catch (std::exception e){
			//std::cout << e.what();
			returnResponse = e.what();
		}
		catch (string errorMessage){
			returnResponse = errorMessage;
		}
	}else if(command == UNDO_COMMAND){
			dataProcessor.clearDisplayList();
			returnResponse = dataProcessor.executeUndo();
			returnDisplay = displaySpecificDay(dataProcessor, currentTime);
	}else if(command == DONE_COMMAND){
		try{
			returnResponse = dataProcessor.markDone(taskNo);
			dataProcessor.clearDisplayList();
			returnDisplay = displaySpecificDay(dataProcessor, currentTime);
		}
		catch (string errorMessage) {
			returnResponse = errorMessage;
		}
	}else if(command == UNDONE_COMMAND){
		try {
			returnResponse = dataProcessor.unDone(taskNo);
			dataProcessor.clearDisplayList();
			returnDisplay = displaySpecificDay(dataProcessor, currentTime);
		}
		catch (string errorMessage){
			returnResponse = errorMessage;
		}
	}else if(command == SHOW_COMMANDS){
		dataProcessor.clearDisplayList();
		returnDisplay = dataProcessor.showCommands();
	}else if(command == SHOW_DONE){
		dataProcessor.clearDisplayList();
		returnDisplay = dataProcessor.showDone();
		if(returnDisplay == EMPTY_RESPONSE){
			returnResponse = DONE_NOT_FOUND_MESSAGE;
		}
	}else if(command == SHOW_FLOAT){
		dataProcessor.clearDisplayList();
		returnDisplay = dataProcessor.showFloat();
		if(returnDisplay == EMPTY_RESPONSE){
			returnResponse = FLOAT_NOT_FOUND_MESSAGE;
		}
	}else if(command == SHOW_FEATURES){
		dataProcessor.clearDisplayList();
		returnDisplay = dataProcessor.showFeatures();
	}else if(command == HELP_REQUEST){
		returnResponse = HELP_MESSAGE;
	}else if(command == PATH_COMMAND){
		if(dataProcessor.savePath(directory)){
			ostringstream out;
			out << PATH_MESSAGE << directory << endl << HELP_MESSAGE <<endl ;
			returnResponse = out.str();
		} else{
			returnResponse = REINPUT_PATH;
		}
	}

}

void Logic::updateUndoCount(string command){
	if(command == UNDO_COMMAND){
		++undoCount;
	}

	if(command != UNDO_COMMAND){
		undoCount = 0;
	}
}

void Logic::checkCommand(string command){
	if(command != ADD_COMMAND && command != DELETE_COMMAND && command != EDIT_COMMAND && command != CLEAR_COMMAND && command != DONE_COMMAND && command != UNDONE_COMMAND){
		++undoCount;
	}
}

void Logic::executeInput(string input){
	TimeMacro currentTime = setCurrentTime();
	
	Parser parser;
	parser.parseInput(input);
	string command = parser.getCommand();
	Data task = parser.getData();
	int taskNo = parser.getTaskNo();
	string errorMessage = parser.getErrorMessage();
	string directory = parser.getDirectory();
	
	string returnResponse;
	string returnDisplay;
	
	if(errorMessage == EMPTY_RESPONSE){		
		
		updateUndoCount(command);
		
		if(undoCount > 1){
			returnResponse = CANNOT_UNDO_MESSAGE;
		} else {
			executeCommand(returnDisplay, returnResponse, command, directory, task, taskNo, currentTime);
		}

		checkCommand(command);

	} else {
		returnResponse = errorMessage;
	}

	Feedback::updateDisplay(returnDisplay);
	Feedback::updateResponse(returnResponse);

	saveData();
}

	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\Logic.cpp





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\Logic.h
	 */


#ifndef LOGIC_H
#define LOGIC_H

#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>
#include <sstream>
#include <ctime>
#include <chrono>
#include "Commons.h"
#include "Feedback.h"

using namespace std;

class Logic{

private:
	static const char COMMA[10];
	static const char DASH[10];
	static const char COLON[10];
	static const char ADD_COMMAND[100];
	static const char DELETE_COMMAND[100];
	static const char SHOW_COMMAND[100];
	static const char CLEAR_COMMAND[100];
	static const char SORT_COMMAND[100];
	static const char SEARCH_COMMAND[100];
	static const char EDIT_COMMAND[100];
	static const char EXIT_COMMAND[100];
	static const char UNDO_COMMAND[100];
	static const char UNDONE_COMMAND[100];
	static const char HELP_REQUEST[100];
	static const char EMPTY_RESPONSE[100];
	static const char IVALID_COMMAND_MESSAGE[100];
	static const char DONE_COMMAND[100];
	static const char SHOW_COMMANDS[100];
	static const char SHOW_FEATURES[100];
	static const char SHOW_DONE[100];
	static const char SHOW_FLOAT[100];
	static const char SHOW_TODAY[100];
	static const char FLOAT_NOT_FOUND_MESSAGE[100];
	static const char DONE_NOT_FOUND_MESSAGE[100];
	static const char SEARCH_NOT_FOUND_MESSAGE[100];
	static const char HELP_MESSAGE[200];
	static const char CANNOT_UNDO_MESSAGE[200];
	static const char WELCOME_MESSAGE[100];
	static const char TODAY_MESSAGE[100];
	static const char NO_SAVED_DATA_MESSAGE[100];
	static const char NO_TASK_TO_SHOW_MESSAGE[100];
	static const char NO_TASK_TODAY_MESSAGE[100];
	static const char NO_TASK_ON_MESSAGE[100];
	static const char AGENDA_FOR_MESSAGE[100];
	static const char NO_FLOAT_TASK_MESSAGE[100];
	static const char FLOAT_TASK_MESSAGE[100];
	static const char PATH_COMMAND[100];
	static const char LOAD_COMMAND[100];
	static const char PATH_MESSAGE[100];
	static const char REINPUT_PATH[100];
	static const char INPUT_PATH_MESSAGE[200];
	static const char AGENDA_THIS_MONTH_MESSAGE[100];
	static const char AGENDA_THIS_WEEK_MESSAGE[100];

	static int undoCount;


public:
	static void executeInput(string input);
	static void executeCommand(string& returnDisplay, string& returnResponse, string command, string directory, Data task, int taskNo, TimeMacro currentTime);
	static void saveData();
	static void loadData(bool& status);
	static bool findPath();
	static string displayIfEmpty(string returnDisplay, TimeMacro current, TimeMacro start, TimeMacro end);
	static string displayToday(string returnDisplay, TimeMacro current);
	static TimeMacro setCurrentTime();
	static string showWelcomeMessage(bool status);
	static string displaySpecificDay(DataProcessor dataProcessor, TimeMacro current);
	static void updateUndoCount(string command);
	static void checkCommand(string command);
	static void clearScreen();
	static string showReturnDisplay(string returnDisplay, TimeMacro current, Data task);
};

#endif
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\Logic.h





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\OperationCenter.cpp
	 */

#include "OperationCenter.h"

using namespace std;


void OperationCenter::executeInput(string input){
	Logic::executeInput(input);
}

void OperationCenter::saveData(){
	Logic::saveData();
}

void OperationCenter::loadData(bool& status){
	Logic::loadData(status);
}

string OperationCenter::showWelcomeMessage(bool status){
	return Logic::showWelcomeMessage(status);
}

string OperationCenter::getDisplay(){
	return Feedback::getDisplay();
}

string OperationCenter::getResponse(){
	return Feedback::getResponse();
}

void OperationCenter::clearScreen(){
	Logic::clearScreen();
}

bool OperationCenter::findPath(){
	return Logic::findPath();
}
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\OperationCenter.cpp





	/**
	 * origin: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\OperationCenter.h
	 */


#ifndef OPERATIONCENTER_H
#define OPERATIONCENTER_H

#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>
#include <sstream>
#include <ctime>
#include <chrono>
#include <Windows.h>
#include "Commons.h"
#include "DataProcessor.h"
#include "Parser.h"
#include "Logic.h"
#include "Feedback.h"

using namespace std;
class OperationCenter{

public:

	OperationCenter() {}
	static void executeInput (string input);
	static string getResponse();
	static string getDisplay();
	static void saveData();
	static void loadData(bool& status);
	static string showWelcomeMessage(bool status);
	static void clearScreen();
	static bool findPath();
};



#endif
	// End of segment: C:\NG only\Studies\NUS\Sem 4\CS2103\BlitzListProject\OperationCenter\OperationCenter.h





